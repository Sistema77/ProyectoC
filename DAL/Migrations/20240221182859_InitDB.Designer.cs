// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ModelContext))]
    [Migration("20240221182859_InitDB")]
    partial class InitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CreditoDAO", b =>
                {
                    b.Property<long>("id_credito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id_credito"));

                    b.Property<long>("Cuentaid_cuenta")
                        .HasColumnType("bigint");

                    b.Property<decimal>("cantidad_prestamo")
                        .HasColumnType("numeric");

                    b.Property<decimal>("cuota_mensual")
                        .HasColumnType("numeric");

                    b.Property<string>("estado_prestamo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("fch_final")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("fch_inicio")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("id_cuenta")
                        .HasColumnType("bigint");

                    b.Property<decimal>("tasa_interes")
                        .HasColumnType("numeric");

                    b.Property<string>("tipo_prestamo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_credito");

                    b.HasIndex("Cuentaid_cuenta");

                    b.ToTable("creditoDAO");
                });

            modelBuilder.Entity("DAL.DAO.CuentaDAO", b =>
                {
                    b.Property<long>("id_cuenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id_cuenta"));

                    b.Property<bool>("con_nomina")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("fch_apertura")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("id_usuario")
                        .HasColumnType("bigint");

                    b.Property<string>("numero_cuenta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("saldo")
                        .HasColumnType("numeric");

                    b.HasKey("id_cuenta");

                    b.HasIndex("id_usuario");

                    b.ToTable("Cuenta", "schemabody");
                });

            modelBuilder.Entity("DAL.DAO.TransaccionDAO", b =>
                {
                    b.Property<long>("id_transaccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id_transaccion"));

                    b.Property<long>("Cuentaid_cuenta")
                        .HasColumnType("bigint");

                    b.Property<long>("NumeroTrasaccion")
                        .HasColumnType("bigint");

                    b.Property<string>("TipoTransacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("cantidad_dinero")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("fch_hora")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("id_cuenta")
                        .HasColumnType("bigint");

                    b.HasKey("id_transaccion");

                    b.HasIndex("Cuentaid_cuenta");

                    b.ToTable("Transaccion", "schemabody");
                });

            modelBuilder.Entity("DAL.DAO.UsuarioDAO", b =>
                {
                    b.Property<long>("id_usuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id_usuario"));

                    b.Property<bool>("cuentaConfirmada")
                        .HasColumnType("boolean");

                    b.Property<string>("dni")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("expiracion_token")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("fch_alta")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("foto")
                        .HasColumnType("bytea");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("tipo_usuario")
                        .HasColumnType("text");

                    b.Property<string>("tlf")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("token")
                        .HasColumnType("text");

                    b.HasKey("id_usuario");

                    b.ToTable("Usuario", "schemausuario");
                });

            modelBuilder.Entity("CreditoDAO", b =>
                {
                    b.HasOne("DAL.DAO.CuentaDAO", "Cuenta")
                        .WithMany("Creditos")
                        .HasForeignKey("Cuentaid_cuenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuenta");
                });

            modelBuilder.Entity("DAL.DAO.CuentaDAO", b =>
                {
                    b.HasOne("DAL.DAO.UsuarioDAO", "Usuario")
                        .WithMany("Cuentas")
                        .HasForeignKey("id_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DAL.DAO.TransaccionDAO", b =>
                {
                    b.HasOne("DAL.DAO.CuentaDAO", "Cuenta")
                        .WithMany("Transacciones")
                        .HasForeignKey("Cuentaid_cuenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuenta");
                });

            modelBuilder.Entity("DAL.DAO.CuentaDAO", b =>
                {
                    b.Navigation("Creditos");

                    b.Navigation("Transacciones");
                });

            modelBuilder.Entity("DAL.DAO.UsuarioDAO", b =>
                {
                    b.Navigation("Cuentas");
                });
#pragma warning restore 612, 618
        }
    }
}
